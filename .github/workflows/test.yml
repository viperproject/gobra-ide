# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (c) 2011-2020 ETH Zurich.

name: test

on:
  push: # run this workflow on every push
  pull_request: # run this workflow on every pull_request
  workflow_dispatch: # allow to manually trigger this workflow
  release:
    types:
      - created # run this workflow when creating a release
  schedule:
    - cron: '0 0 * * *' # run every day at 00:00

jobs:
  build-and-test-server:
    # build-and-test-server is the base job on which all other jobs depend
    # we enforce here that the nightly build job only runs in the main repo:
    if: (github.event_name == 'schedule' && github.repository == 'viperproject/gobra-ide') || (github.event_name != 'schedule')
    runs-on: ubuntu-latest
    container: gobraverifier/gobra-base:v2
    steps:
      - name: Checkout Gobra-IDE
        uses: actions/checkout@v2
        with:
          path: gobra-ide

      # clone Viper dependencies
      - name: Checkout Gobra
        uses: actions/checkout@v2
        with:
          repository: viperproject/gobra
          path: gobra
      - name: Checkout Silver
        uses: actions/checkout@v2
        with:
          repository: viperproject/silver
          path: silver
      - name: Checkout Silicon
        uses: actions/checkout@v2
        with:
          repository: viperproject/silicon
          path: silicon
      - name: Checkout Carbon
        uses: actions/checkout@v2
        with:
          repository: viperproject/carbon
          path: carbon
      - name: Checkout ViperServer
        uses: actions/checkout@v2
        with:
          repository: viperproject/viperserver
          path: viperserver

      - name: Java Version
        run: java --version
      - name: Z3 Version
        run: z3 -version

      - name: Create version file
        run: |
          echo "Gobra-IDE: commit $(git -C gobra-ide rev-parse HEAD)" > versions.txt
          echo "Gobra: commit $(git -C gobra rev-parse HEAD)" >> versions.txt
          echo "ViperServer: commit $(git -C viperserver rev-parse HEAD)" >> versions.txt
          echo "Silicon: commit $(git -C silicon rev-parse HEAD)" >> versions.txt
          echo "Carbon: commit $(git -C carbon rev-parse HEAD)" >> versions.txt
          echo "Silver: commit $(git -C silver rev-parse HEAD)" >> versions.txt
        # first line overwrites versions.txt in case it already exists, all other append to the file
      - name: Upload version file
        uses: actions/upload-artifact@v2
        with:
          name: versions.txt
          path: versions.txt

      # create symlinks between and to Viper dependencies:
      - name: Create Silicon's sym links
        run: ln --symbolic ../silver
        working-directory: silicon
      - name: Create Carbon's sym links
        run: ln --symbolic ../silver
        working-directory: carbon
      - name: Create ViperServers's sym links
        run: ln --symbolic ../silver; ln --symbolic ../silicon; ln --symbolic ../carbon
        working-directory: viperserver
      - name: Create Gobra's sym links
        run: ln --symbolic ../silver; ln --symbolic ../silicon; ln --symbolic ../carbon; ln --symbolic ../viperserver
        working-directory: gobra
      - name: Create Gobra IDE's sym links
        run: ln --symbolic ../../gobra
        working-directory: gobra-ide/server

      - name: Set sbt cache variables
        run: echo "SBT_OPTS=-Dsbt.global.base=sbt-cache/.sbtboot -Dsbt.boot.directory=sbt-cache/.boot -Dsbt.ivy.home=sbt-cache/.ivy" >> $GITHUB_ENV
        # note that the cache path is relative to the directory in which sbt is invoked.
        # hence, invoking sbt in server folder means that sbt cache will be in gobra-ide/server/sbt-cache

      - name: Cache SBT
        uses: actions/cache@v2
        with:
          path: |
            gobra-ide/server/sbt-cache/.sbtboot
            gobra-ide/server/sbt-cache/.boot
            gobra-ide/server/sbt-cache/.ivy/cache
            gobra-ide/server/project/target
            gobra-ide/server/target
            gobra/project/target
            gobra/target
            viperserver/project/target
            viperserver/target
            carbon/project/target
            carbon/target
            silicon/project/target
            silicon/target
            silver/project/target
            silver/target
          key: ${{ runner.os }}-sbt-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-sbt-

      - name: Assemble Gobra server
        run: sbt "set test in assembly := {}" clean assembly
        working-directory: gobra-ide/server

      - name: Upload Gobra server artifact
        uses: actions/upload-artifact@v2
        with:
          name: server
          path: gobra-ide/server/target/scala-2.12/server.jar

      - name: Test Gobra server
        run: sbt test
        working-directory: gobra-ide/server

  create-gobra-tools:
    # run this command under the following circumstances:
    # - created a new release
    # - 'workflow_dispatch': manually triggered using the following POST request:
    #   `curl -X POST -u <username>:<token> -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/viperproject/gobra-ide/actions/workflows/test.yml/dispatches" -d '{"ref":"<branch name>"}`
    # - as part of our nightly build job (but only in the main repo)
    if: (github.event_name == 'release' && github.event.action == 'created') || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    needs: build-and-test-server
    runs-on: ubuntu-latest
    steps:
      - name: Install prerequisites
        run: sudo apt-get install zip unzip

      - name: Download Gobra server artifact
        uses: actions/download-artifact@v2
        with:
          name: server

      - name: Download Viper Tools for Windows
        run: curl --fail --silent --show-error http://viper.ethz.ch/downloads/ViperToolsWin.zip --output ViperToolsWin.zip
      - name: Unzip Viper Tools for Windows
        run: unzip ViperToolsWin.zip -d GobraToolsWin
      - name: Download Viper Tools for Linux
        run: curl --fail --silent --show-error http://viper.ethz.ch/downloads/ViperToolsLinux.zip --output ViperToolsLinux.zip
      - name: Unzip Viper Tools for Linux
        run: unzip ViperToolsLinux.zip -d GobraToolsLinux
      - name: Download Viper Tools for macOS
        run: curl --fail --silent --show-error http://viper.ethz.ch/downloads/ViperToolsMac.zip --output ViperToolsMac.zip
      - name: Unzip Viper Tools for macOS
        run: unzip ViperToolsMac.zip -d GobraToolsMac

      - name: Copy Gobra server artifact into each tool folder
        run: |
          mkdir -p GobraToolsWin/server && cp server.jar GobraToolsWin/server/server.jar
          mkdir -p GobraToolsLinux/server && cp server.jar GobraToolsLinux/server/server.jar
          mkdir -p GobraToolsMac/server && cp server.jar GobraToolsMac/server/server.jar

      - name: Create folder to later sync to AWS S3
        run: mkdir deploy
        # note that we change into the tool folder to zip it. This avoids including the parent folder in the zip
      - name: Zip Gobra Tools for Windows
        run: zip -r ../deploy/GobraToolsWin.zip ./*
        working-directory: GobraToolsWin
      - name: Zip Gobra Tools for Linux
        run: zip -r ../deploy/GobraToolsLinux.zip ./*
        working-directory: GobraToolsLinux
      - name: Zip Gobra Tools for macOS
        run: zip -r ../deploy/GobraToolsMac.zip ./*
        working-directory: GobraToolsMac

      - name: Upload Gobra tools artifact
        uses: actions/upload-artifact@v2
        with:
          name: GobraTools
          path: deploy

  build-and-test-client:
    needs: build-and-test-server
    strategy:
      # tests should not be stopped when they fail on one of the OSes:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Gobra-IDE
        uses: actions/checkout@v2
        with:
          path: gobra-ide

      - name: Download Gobra server artifact
        uses: actions/download-artifact@v2
        id: server-download
        with:
          name: server
          # place artifact at the same location as the build has produced it:
          path: gobra-ide/server/target/scala-2.12
          # note that download-path is the parent folder (not server.jar)

      - name: Install Node.js
        uses: actions/setup-node@v1.4.4
        with:
          node-version: '10'

      - name: Setup Java JDK
        uses: actions/setup-java@v1.4.3
        with:
          java-version: '11'
      - run: java --version

      - name: Cache npm
        uses: actions/cache@v2
        with:
          path: gobra-ide/client/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm ci --cache .npm --prefer-offline
        working-directory: gobra-ide/client

      - name: Start xvfb (ubuntu only)
        if: startsWith(matrix.os, 'ubuntu')
        run: /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 & echo ">>> Started xvfb"

      - name: Run tests (ubuntu only)
        if: startsWith(matrix.os, 'ubuntu')
        env:
          DISPLAY: ':99.0'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # run tests as sudo on ubutunu as this is required to install the extension to VSCode:
        run: sudo npm test -- --server ${{steps.server-download.outputs.download-path}}/server.jar
        working-directory: gobra-ide/client
      - name: Run tests (all except ubuntu)
        if: ${{ !startsWith(matrix.os, 'ubuntu') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm test -- --server ${{steps.server-download.outputs.download-path}}/server.jar
        working-directory: gobra-ide/client

      # after running `npm test` as sudo on ubuntu, `npm run package` (as non-root user) will fail
      # as all files in client/dist/ will be owned by sudo. Hence, the following step deletes the
      # 'dist' folder (also as root):
      - name: Clean 'dist' folder (ubuntu only)
        if: startsWith(matrix.os, 'ubuntu')
        run: sudo rm -rf dist
        working-directory: gobra-ide/client

      # `npm run package` resp. `vsce` complains that it cannot find 
      # locate-java-home and vs-verification-toolbox dependencies (the two non-npm dependencies).
      # this seems related to https://github.com/npm/cli/issues/791
      # the current workaround is to `run npm install` first:
      - name: Run 'npm install' as a workaround to later being able to package Gobra-IDE (ubuntu only)
        if: startsWith(matrix.os, 'ubuntu')
        run: npm install
        working-directory: gobra-ide/client

      - name: List all files that will be packaged (ubuntu only)
        if: startsWith(matrix.os, 'ubuntu')
        run: npx vsce ls
        working-directory: gobra-ide/client

      - name: Package Gobra-IDE extension (ubuntu only)
        if: startsWith(matrix.os, 'ubuntu')
        # note that baseContentUrl has to be manually provided as vsce does not know that it is run in the client subfolder:
        run: npm run package -- --baseContentUrl https://github.com/viperproject/gobra-ide/raw/master/client --out gobra-ide.vsix
        working-directory: gobra-ide/client

      - name: Upload packaged Gobra-IDE (ubuntu-only)
        if: startsWith(matrix.os, 'ubuntu')
        uses: actions/upload-artifact@v2
        with:
          name: gobra-ide.vsix
          path: gobra-ide/client/gobra-ide.vsix

  create-nightly-release:
    # this job creates a new nightly pre-release, set Gobra tools as artifacts, and deletes old releases
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    needs: [create-gobra-tools, build-and-test-client]
    runs-on: ubuntu-latest
    steps:
      - name: Download Gobra tools artifact
        uses: actions/download-artifact@v2
        with:
          name: GobraTools
          path: deploy

      - name: Download version file
        uses: actions/download-artifact@v2
        with:
          name: versions.txt

      - name: Checkout Gobra-IDE
        uses: actions/checkout@v2
        with:
          path: gobra-ide

      - name: Create release tag
        shell: bash
        run: echo "TAG_NAME=$(date +v-%Y-%m-%d-%H%M)" >> $GITHUB_ENV

      - name: Create nightly release
        id: create_release
        uses: viperproject/create-nightly-release@v1
        env:
          # This token is provided by Actions, you do not need to create your own token
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Nightly Release ${{ env.TAG_NAME }}
          body_path: versions.txt
          keep_num: 1 # keep the previous nightly release such that there are always two

      - name: Upload Gobra tools for Windows
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/GobraToolsWin.zip
          asset_name: GobraToolsWin.zip
          asset_content_type: application/zip

      - name: Upload Gobra tools for Ubuntu
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/GobraToolsLinux.zip
          asset_name: GobraToolsLinux.zip
          asset_content_type: application/zip

      - name: Upload Gobra tools for macOS
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/GobraToolsMac.zip
          asset_name: GobraToolsMac.zip
          asset_content_type: application/zip


  set-release-artifacts:
    # this job adds the Gobra tools as release artifacts for manually created releases
    if: github.event_name == 'release' && github.event.action == 'created'
    needs: [create-gobra-tools, build-and-test-client]
    runs-on: ubuntu-latest
    steps:
      - name: Download Gobra tools artifact
        uses: actions/download-artifact@v2
        with:
          name: GobraTools
          path: deploy

      - name: Download version file
        uses: actions/download-artifact@v2
        with:
          name: versions.txt

      - name: Get the upload URL for the newly created release
        id: get_release
        uses: bruceadams/get-release@v1.2.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload version file as artifact
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: versions.txt
          asset_name: versions.txt
          asset_content_type: text/plain

      - name: Upload Gobra tools for Windows
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: deploy/GobraToolsWin.zip
          asset_name: GobraToolsWin.zip
          asset_content_type: application/zip

      - name: Upload Gobra tools for Ubuntu
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: deploy/GobraToolsLinux.zip
          asset_name: GobraToolsLinux.zip
          asset_content_type: application/zip

      - name: Upload Gobra tools for macOS
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: deploy/GobraToolsMac.zip
          asset_name: GobraToolsMac.zip
          asset_content_type: application/zip
