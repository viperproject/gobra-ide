image: gobraverifier/gobra-ide-base:v3

stages:
  - build
  - test

variables:
  # note that the cache path is relative to directory in which sbt is invoked.
  # hence, invoking sbt in server folder means that sbt cache will be in server/sbt-cache
  SBT_OPTS: "-Dsbt.global.base=sbt-cache/.sbtboot -Dsbt.boot.directory=sbt-cache/.boot -Dsbt.ivy.home=sbt-cache/.ivy"

build-server:
  stage: build
  before_script:
    - cd server
    # save current directory such that one can return to it after setting symbolic links:
    - cwd=$(pwd)
    # clone Viper dependencies:
    - git clone https://github.com/viperproject/silver.git ../silver
    - git clone https://github.com/viperproject/silicon.git ../silicon
    - git clone https://github.com/viperproject/carbon.git ../carbon
    - git clone https://github.com/viperproject/viperserver.git ../viperserver
    - git clone https://github.com/viperproject/gobra ../gobra
    # print some version numbers:
    - java --version
    - z3 -version
    - node --version
    - npm --version
    - echo "Silver commit:" $(git -C ../silver rev-parse HEAD)
    - echo "Silicon commit:" $(git -C ../silicon rev-parse HEAD)
    - echo "Carbon commit:" $(git -C ../carbon rev-parse HEAD)
    - echo "ViperServer commit:" $(git -C ../viperserver rev-parse HEAD)
    - echo "Gobra commit:" $(git -C ../gobra rev-parse HEAD)
    # create symlinks between and to Viper dependencies:
    - cd ../silicon; ln --symbolic ../silver; cd $cwd
    - cd ../carbon; ln --symbolic ../silver; cd $cwd
    - cd ../viperserver; ln --symbolic ../silver; ln --symbolic ../silicon; ln --symbolic ../carbon; cd $cwd
    - cd ../gobra; ln --symbolic ../silver; ln --symbolic ../silicon; ln --symbolic ../carbon; ln --symbolic ../viperserver; cd $cwd
    - ln --symbolic ../gobra
  script:
    # assemble Gobra server without running unit tests:
    - sbt "set test in assembly := {}" clean assembly
  artifacts:
    paths:
      - server/target/scala-2.12/server.jar
  cache:
    paths:
      - server/sbt-cache/.ivy/cache
      - server/sbt-cache/.boot
      - server/sbt-cache/.sbtboot
      - server/sbt-cache/target

test-server:
  stage: test
  script:
    - sbt test

test-client:
  stage: test
  before_script:
    - cd client
    # `npm ci` should be run as non-root such that the `prepare` step is executed for git dependencies
    # however, `npm test` has to be run as root because vscode needs root permissions to install an extension
    # try create .npm and create node_modules (as root)
    - mkdir -p .npm
    - mkdir node_modules
    # transfer ownership of node_modules and .npm folders to user `node`:
    # wrap these commands in quotes as the linter does not seem to like `:`
    - "chown -R node: .npm"
    - "chown node: node_modules"
    # run npm ci as user `node`:
    - su -c "npm ci --cache .npm --prefer-offline" node
  script:
    # start xvfb:
    - /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 & echo ">>> Started xvfb"
    - DISPLAY=":99.0" npm test
  cache:
    paths:
      - client/.npm/
