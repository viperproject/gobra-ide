// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

package evaluation;

type Point struct {
  x int;
  y int;
};

type Tree struct {
  Left  *Tree;
  Value int;
  Right *Tree;
};

ensures x <= r && y <= r;
ensures r == x || r == y;
func max(x, y int) (r int) {
  if (x < y) { r = y;
  } else { r = x; };
};

ensures s <= l;
ensures s == x || s == y;
ensures l == x || l == y;
func sort(x, y int) (s, l int) {
  if (x < y) { s = x; l = y;
  } else { s = y; l = x; };
};


func client1() {
  var a, b = 5, 7;
  r := max(a, b);
  assert r == 7;
};

func init() {
  var a int;
  assert a == 0;

  var b bool;
  assert b == false;
};

requires 0 <= n;
ensures 2*e == (n+1)*n;
func sum(n int) (e int) {
  assert e == 0;
  invariant 0 <= i && i <= n + 1;
  invariant 2*e == i*(i-1);
  for i := 1; i <= n; i++ {
    e = e + i;
  };
};

ensures false;
func infinite() {
  for {};
};

func shortStatement() {
  if s := sum(4); s == 10 {
  } else { assert s != s; };
};

requires acc(*p);
ensures acc(*p) && *p == v;
func set(p *int, v int) {
  *p = v;
};

func pointer1() {
  i! := 5;
  p := &i;
  *p = 7;
  assert i == 7;
};

func pointer2() {
  i! := 5;
  set(&i, 7);
  assert i == 7;
};

requires acc(*p) && acc(*q);
ensures acc(*p) && acc(*q);
ensures *p == old(*q);
ensures *q == old(*p);
func swap(p, q *int) {
  tmp := *p;
  *p = *q;
  *q = tmp;
};

func pointer3() {
  i! := 5;
  j! := 7;
  swap(&i, &j);
  assert i == 7;
};


func OriginV() (r Point) {
  r = Point{0, 0};
};


func mirror() {
  p := Point{5, 7};
  assert p.x == 5;
  tmp := p.x;
  p.x = p.y;
  p.y = tmp;
  assert p.x == 7;
};

ensures acc(r.x) && r.x == 0;
ensures acc(r.y) && r.y == 0;
func Origin() (r *Point) {
  r = &Point{0, 0};
};

requires acc(p.x);
ensures  acc(p.x);
pure func (p *Point) getX1() int {
  return p.x;
};

requires acc(p.x);
ensures  acc(p.x) && res == old(p.x) && p.x == old(p.x);
func (p *Point) getX2() (res int) {
  res = p.x;
};

func client() {
  p! := Point{5, 7};
  x := (&p).getX2();
  assert x == 5;
  y := p.getX2();
  assert y == 5;
  assert ((&p).getX1()) == 5;
};

requires this != nil ==> (acc(this.x) && acc(this.y));
ensures acc(res.x) && acc(res.y);
func (this *Point) idOrNew() (res *Point) {
  if this == nil {
    res = &Point{0,0};
  } else {
    res = this;
  };
};

func idClient() {
  var p *Point;
  assert p == nil;
  q := p.idOrNew();
  q.x = 5;
};

pred tree(self *Tree) {
  acc(self.Left) && acc(self.Value) && acc(self.Right) &&
  (self.Left != nil ==> tree(self.Left)) &&
  (self.Right != nil ==> tree(self.Right))
};

requires self != nil ==> tree(self);
ensures  self != nil ==> tree(self);
func (self *Tree) Contains(v int) (res bool) {
  if self == nil { res = false;
  } else {
    unfold tree(self);
    if self.Value == v { res = true;
    } else {
      res = (self.Left).Contains(v) || (self.Right).Contains(v);
    };
    fold tree(self);
  };
};

ensures x <= r && y <= r;
ensures r == x || r == y;
func max_1(x, y int) (r int) {
  if (x < y) { r = y;
  } else { r = x; };
};

ensures s <= l;
ensures s == x || s == y;
ensures l == x || l == y;
func sort_1(x, y int) (s, l int) {
  if (x < y) { s = x; l = y;
  } else { s = y; l = x; };
};


func client1_1() {
  var a, b = 5, 7;
  r := max(a, b);
  assert r == 7;
};

func init_1() {
  var a int;
  assert a == 0;

  var b bool;
  assert b == false;
};

requires 0 <= n;
ensures 2*e == (n+1)*n;
func sum_1(n int) (e int) {
  assert e == 0;
  invariant 0 <= i && i <= n + 1;
  invariant 2*e == i*(i-1);
  for i := 1; i <= n; i++ {
    e = e + i;
  };
};

ensures false;
func infinite_1() {
  for {};
};

func shortStatement_1() {
  if s := sum(4); s == 10 {
  } else { assert s != s; };
};

requires acc(*p);
ensures acc(*p) && *p == v;
func set_1(p *int, v int) {
  *p = v;
};

func pointer1_1() {
  i! := 5;
  p := &i;
  *p = 7;
  assert i == 7;
};

func pointer2_1() {
  i! := 5;
  set(&i, 7);
  assert i == 7;
};

requires acc(*p) && acc(*q);
ensures acc(*p) && acc(*q);
ensures *p == old(*q);
ensures *q == old(*p);
func swap_1(p, q *int) {
  tmp := *p;
  *p = *q;
  *q = tmp;
};

func pointer3_1() {
  i! := 5;
  j! := 7;
  swap_1(&i, &j);
  assert i == 7;
};


func OriginV_1() (r Point) {
  r = Point{0, 0};
};


func mirror_1() {
  p := Point{5, 7};
  assert p.x == 5;
  tmp := p.x;
  p.x = p.y;
  p.y = tmp;
  assert p.x == 7;
};

ensures acc(r.x) && r.x == 0;
ensures acc(r.y) && r.y == 0;
func Origin_1() (r *Point) {
  r = &Point{0, 0};
};

requires acc(p.x);
ensures  acc(p.x);
pure func (p *Point) getX1_1() int {
  return p.x;
};

requires acc(p.x);
ensures  acc(p.x) && res == old(p.x) && p.x == old(p.x);
func (p *Point) getX2_1() (res int) {
  res = p.x;
};

func client_1() {
  p! := Point{5, 7};
  x := (&p).getX2();
  assert x == 5;
  y := p.getX2();
  assert y == 5;
  assert ((&p).getX1()) == 5;
};

requires this != nil ==> (acc(this.x) && acc(this.y));
ensures acc(res.x) && acc(res.y);
func (this *Point) idOrNew_1() (res *Point) {
  if this == nil {
    res = &Point{0,0};
  } else {
    res = this;
  };
};

func idClient_1() {
  var p *Point;
  assert p == nil;
  q := p.idOrNew();
  q.x = 5;
};

pred tree_1(self *Tree) {
  acc(self.Left) && acc(self.Value) && acc(self.Right) &&
  (self.Left != nil ==> tree_1(self.Left)) &&
  (self.Right != nil ==> tree_1(self.Right))
};

requires self != nil ==> tree_1(self);
ensures  self != nil ==> tree_1(self);
func (self *Tree) Contains_1(v int) (res bool) {
  if self == nil { res = false;
  } else {
    unfold tree_1(self);
    if self.Value == v { res = true;
    } else {
      res = (self.Left).Contains_1(v) || (self.Right).Contains_1(v);
    };
    fold tree_1(self);
  };
};